library(cowplot)
library(dplyr)
library(Matrix)
library(Seurat)
library(RColorBrewer)
library(harmony)

####loading####
#Aldh1l1;Ptbp1;Sun1
#Female
#Midbrain
TKD2 <- Read10X_h5("Ptbp1/Brain_Matrix_file/Midbrain/TKD2/TKD2_filtered_feature_bc_matrix.h5")
TKD3 <- Read10X_h5("Ptbp1/Brain_Matrix_file/Midbrain/TKD3/TKD3_filtered_feature_bc_matrix.h5")
TKD4 <- Read10X_h5("Ptbp1/Brain_Matrix_file/Midbrain/TKD4/TKD4_filtered_feature_bc_matrix.h5")
TKD4A <- Read10X_h5("Ptbp1/Brain_Matrix_file/Midbrain/TKD4A/TKD4A_filtered_feature_bc_matrix.h5")

#adding column names to avoid barcode clash
colnames(TKD2) = paste0("TKD2_", colnames(TKD2))
colnames(TKD3) = paste0("TKD3_", colnames(TKD3))
colnames(TKD4) = paste0("TKD4_", colnames(TKD4))
colnames(TKD4A) = paste0("TKD4A_", colnames(TKD4A))

#Create Seurat object. Cutoff 500 genes in 5 cells
TKD2 <- CreateSeuratObject(counts = TKD2, project = "Ptbp1_WT_SN", min.cells = 5, min.features = 500)
TKD3 <- CreateSeuratObject(counts = TKD3, project = "Ptbp1_HET_SN", min.cells = 5, min.features = 500)
TKD4 <- CreateSeuratObject(counts = TKD4, project = "Ptbp1_HOM_SN", min.cells = 5, min.features = 500)
TKD4A <- CreateSeuratObject(counts = TKD4A, project = "Ptbp1_HOM_SN", min.cells = 5, min.features = 500)

#Filter 
TKD2 <- subset(TKD2, subset = nCount_RNA > 2000) 
TKD3 <- subset(TKD3, subset = nCount_RNA > 2000)
TKD4 <- subset(TKD4, subset = nCount_RNA > 2000)
TKD4A <- subset(TKD4A, subset = nCount_RNA > 2000)

###merge####
P_SN <- merge(x = TKD2, y = list(TKD3, TKD4,TKD4A))
rm(TKD2)
rm(TKD3)
rm(TKD4)
rm(TKD4A)
P_SN <- RenameIdents(P_SN, "TKD2" = "WT_SN", "TKD3" = "HET_SN", "TKD4" = "HOM_SN_1", "TKD4A" = "HOM_SN_2")
P_SN <- AddMetaData(P_SN, P_SN@active.ident, "Genotype")
table(P_SN@meta.data$orig.ident)
Idents(P_SN) <- "Genotype"

#check diSNibution of Mitochondrial genes, Ribosomal genes, and number of UMI (=nCount_RNA)
P_SN[["percent.mt"]] <- PercentageFeatureSet(P_SN, pattern = "^mt-")
P_SN[["percent.RPS"]] <- PercentageFeatureSet(P_SN, pattern = "^Rps")
P_SN[["percent.RPL"]] <- PercentageFeatureSet(P_SN, pattern = "^Rpl")

VlnPlot(P_SN, features = c("nCount_RNA","nFeature_RNA",
                            "percent.mt","percent.RPS","percent.RPL"),
        pt.size = 0)

#order
my_levels <- c("WT_SN", "HET_SN", "HOM_SN_1","HOM_SN_2")
P_SN@active.ident <- factor(x = P_SN@active.ident, levels = my_levels)

#filter some rough values
P_SN <- subset(P_SN, subset = percent.mt <50)
P_SN <- subset(P_SN, subset = percent.RPS <20)

####processing####
P_SN <- SCTransform(P_SN, vars.to.regress = c("nCount_RNA","nFeature_RNA"))
P_SN <- RunPCA(P_SN, npcs = 50, ndims.print = NA, verbose = F)
P_SN <- RunHarmony(P_SN, group.by.vars = "orig.ident", assay.use = "SCT", plot.convergence = T)
P_SN <- RunUMAP(P_SN, reduction = "harmony", dims = 1:20,
                 n.neighbours = 10L, min.dist = 0.01, spread = 1)
DimPlot(P_SN, reduction = "umap", label = F,pt.size = 0.5, cols = , 
        split.by = "Genotype", ncol = 2) + NoLegend()

####Clusters####
P_SN <- FindNeighbors(P_SN, dims = 1:20, reduction = "harmony")
P_SN <- FindClusters(P_SN, resolution = 0.8) #SCT_Midbrainn_res.0.8
DimPlot(P_SN, reduction = "umap", label = T, pt.size = 0.5) + NoLegend()

markers <- FindAllMarkers(P_SN, test.use = "wilcox",
                          logfc.threshold = 0.5,
                          min.pct = 0.2, verbose = T)
write.csv(markers, file = "Ptbp1/CSV/DEG_P_SN.csv")

####1st Cleanup####
#0 Astrocyte
#1 Astrocyte
#2 Microglia
#3 Endothelial
#4 Oligodendrocyte
#5 Oligodendrocyte
#6 Neuron
#7 Astrocyte
#8 Blood
#9 Oligodendrocyte
#10 Pericyte
#11 Oligodendrocyte
#12 Endothelial
#13 Microglia
#14 VSMC
#15 OPC
#16 Astrocyte
#17 Astrocyte
#18 Neuron
#19 MSC
#20 Neuron
#21 Oligodendrocyte
#22 Oligodendrocyte
#23 MSC
#24 Neuron
#25 Microglia
#26 Oligodendrocyte
#27 Doublet
#28 BAM
#29 BAM
#30 Endothelial

P_SN <- subset(P_SN, idents = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", 
                                "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", 
                                "23", "24", "25", "26", "28", "29", "30")) 
P_SN <- SCTransform(P_SN, vars.to.regress = c("nCount_RNA","nFeature_RNA"))
P_SN <- RunPCA(P_SN, npcs = 50, ndims.print = NA, verbose = F)
P_SN <- RunHarmony(P_SN, group.by.vars = "orig.ident"
                    , assay.use = "SCT", plot.convergence = T)
P_SN <- RunUMAP(P_SN, reduction = "harmony", dims = 1:20,
                 n.neighbours = 10L, min.dist = 0.01, spread = 1)
DimPlot(P_SN, reduction = "umap", label = F,pt.size = 0.5, cols = , 
        split.by = "Genotype", ncol = 2) + NoLegend()

P_SN <- RenameIdents(P_SN, "0"= "Astrocyte", "1"= "Astrocyte", "2"= "Microglia", "3"= "Endothelial",
                     "4"= "Oligodendrocyte", "5"= "Oligodendrocyte",
                     "6"= "Neuron", "7"= "Astrocyte", "8"= "Blood cell", "9"= "Oligodendrocyte",
                     "10"= "Pericyte", "11"= "Oligodendrocyte", 
                     "12"= "Endothelial", "13"= "Microglia", "14"="VSMC",
                     "15"="OPC", "16"= "Astrocyte", "17"= "Astrocyte",
                     "18"= "Neuron", "19"= "MSC", "20"= "Neuron",
                     "21"= "Oligodendrocyte", "22"= "Oligodendrocyte", 
                     "23"= "MSC", "24"= "Neuron", "25"= "Microglia", "26"= "Oligodendrocyte",
                     "28" = "BAM", "29" = "BAM", "30"= "Endothelial")
Group <- sort(levels(P_SN@active.ident))
P_SN <- AddMetaData(P_SN, P_SN@active.ident, "Clusters")
P_SN@active.ident <- factor(x = P_SN@active.ident, levels = Group)
P_SN@meta.data$Clusters <- factor(x = P_SN@meta.data$Clusters, levels = Group)
DimPlot(P_SN, reduction = "umap", label = T, pt.size = 0.5) + NoLegend() + NoAxes()

save(P_SN, file = "Ptbp1/Robj/Ptbp1_SN.Robj")

####Astrocyte####
P_SN <- subset(P_SN, idents = c('Astrocyte'))
P_SN <- SCTransform(P_SN, vars.to.regress = c("nCount_RNA","nFeature_RNA"))
P_SN <- RunPCA(P_SN, npcs = 50, ndims.print = NA, verbose = F)
P_SN <- RunHarmony(P_SN, group.by.vars = "orig.ident", assay.use = "SCT")
P_SN <- RunUMAP(P_SN, reduction = "harmony", dims = 1:10,
                 n.neighbours = 10L, min.dist = 0.01, spread = 1)
P_SN <- FindNeighbors(P_SN, dims = 1:10, reduction = "harmony")
P_SN <- FindClusters(P_SN, resolution = 0.3) #SCT_snn_res.0.8
DimPlot(P_SN, reduction = "umap", label = T, pt.size = 0.5) + NoLegend()
DimPlot(P_SN, reduction = "umap", label = T, pt.size = 0.5, split.by = "Genotype") + NoLegend()

markers <- FindAllMarkers(P_SN, test.use = "wilcox",
                          logfc.threshold = 0.5,
                          min.pct = 0.2, verbose = T)
write.csv(markers, file = "Ptbp1/CSV/DEG-initial-SN_Astro.csv")

#4 MYOC
#5
#6
#7
P_SN <- subset(P_SN, idents = c("0","1","2","3"))
P_SN <- SCTransform(P_SN, vars.to.regress = c("nCount_RNA","nFeature_RNA"))
P_SN <- RunPCA(P_SN, npcs = 50, ndims.print = NA, verbose = F)
P_SN <- RunHarmony(P_SN, group.by.vars = "Genotype", assay.use = "SCT")
P_SN <- RunUMAP(P_SN, reduction = "harmony", dims = 2:15,
                 n.neighbours = 10L, min.dist = 0.01, spread = 1)
DimPlot(P_SN, reduction = "umap", label = , pt.size = 0.5)

P_SN <- FindNeighbors(P_SN, dims = 1:15, reduction = "harmony")
P_SN <- FindClusters(P_SN, resolution = 0.2) #SCT_snn_res.0.8

DimPlot(P_SN, reduction = "umap", label = T, pt.size = 0.5) + NoLegend()
markers <- FindAllMarkers(P_SN, test.use = "wilcox",
                          logfc.threshold = 0.5,
                          min.pct = 0.2, verbose = T)
write.csv(markers, file = "Ptbp1/CSV/DEG-initial-SN_Astro.csv")


save(P_SN, file = "Ptbp1/Robj/Ptbp1_SN_Astrocyte.Robj")

> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19044)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] harmony_1.0        Rcpp_1.0.7         RColorBrewer_1.1-2 Seurat_3.2.3       Matrix_1.2-17      dplyr_0.8.3       
[7] cowplot_1.0.0     

loaded via a namespace (and not attached):
 [1] nlme_3.1-142         bitops_1.0-6         matrixStats_0.54.0   RcppAnnoy_0.0.18     httr_1.4.1          
 [6] sctransform_0.3.2    tools_3.6.1          R6_2.4.0             irlba_2.3.3          rpart_4.1-15        
[11] KernSmooth_2.23-16   uwot_0.1.10          mgcv_1.8-31          lazyeval_0.2.2       colorspace_1.4-1    
[16] withr_2.1.2          npsurv_0.4-0         tidyselect_0.2.5     gridExtra_2.3        compiler_3.6.1      
[21] plotly_4.9.0         labeling_0.3         caTools_1.17.1.2     scales_1.0.0         lmtest_0.9-37       
[26] spatstat.data_2.1-0  ggridges_0.5.1       pbapply_1.4-1        spatstat_1.64-1      goftest_1.2-2       
[31] stringr_1.4.0        digest_0.6.20        spatstat.utils_2.2-0 pkgconfig_2.0.2      htmltools_0.5.1.1   
[36] htmlwidgets_1.3      rlang_0.4.10         rstudioapi_0.11      shiny_1.3.2          zoo_1.8-6           
[41] jsonlite_1.6.1       ica_1.0-2            gtools_3.8.1         magrittr_1.5         patchwork_1.0.0.9000
[46] munsell_0.5.0        abind_1.4-5          reticulate_1.13      lifecycle_0.1.0      stringi_1.4.3       
[51] MASS_7.3-51.4        gplots_3.0.4         Rtsne_0.15           plyr_1.8.4           grid_3.6.1          
[56] parallel_3.6.1       gdata_2.18.0         listenv_0.7.0        promises_1.0.1       ggrepel_0.8.1       
[61] crayon_1.3.4         deldir_0.1-22        miniUI_0.1.1.1       lattice_0.20-38      splines_3.6.1       
[66] tensor_1.5           pillar_1.4.2         igraph_1.2.4.1       future.apply_1.3.0   reshape2_1.4.3      
[71] codetools_0.2-16     leiden_0.3.1         glue_1.3.1           lsei_1.2-0           data.table_1.12.8   
[76] vctrs_0.3.8          png_0.1-7            httpuv_1.5.1         gtable_0.3.0         RANN_2.6.1          
[81] purrr_0.3.4          polyclip_1.10-0      tidyr_1.0.2          scattermore_0.7      future_1.14.0       
[86] assertthat_0.2.1     ggplot2_3.3.5        rsvd_1.0.2           mime_0.7             xtable_1.8-4        
[91] later_0.8.0          survival_3.1-7       viridisLite_0.3.0    tibble_2.1.3         cluster_2.1.0       
[96] globals_0.12.4       fitdistrplus_1.0-14  ROCR_1.0-7   
